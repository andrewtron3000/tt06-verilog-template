//
// Generated by Bluespec Compiler, version 2024.01-1-g4d953407 (build 4d953407)
//
// On Thu Apr 18 22:39:16 EDT 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_start                      O     1
// getResult                      O     8 reg
// RDY_getResult                  O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// start_a                        I     8
// EN_start                       I     1
// EN_getResult                   I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkRule30(CLK,
		RST_N,

		start_a,
		EN_start,
		RDY_start,

		EN_getResult,
		getResult,
		RDY_getResult);
  input  CLK;
  input  RST_N;

  // action method start
  input  [7 : 0] start_a;
  input  EN_start;
  output RDY_start;

  // actionvalue method getResult
  input  EN_getResult;
  output [7 : 0] getResult;
  output RDY_getResult;

  // signals for module outputs
  wire [7 : 0] getResult;
  wire RDY_getResult, RDY_start;

  // register busy_flag
  reg busy_flag;
  wire busy_flag$D_IN, busy_flag$EN;

  // register r30
  reg [7 : 0] r30;
  wire [7 : 0] r30$D_IN;
  wire r30$EN;

  // register step_complete
  reg step_complete;
  wire step_complete$D_IN, step_complete$EN;

  // register x
  reg [39 : 0] x;
  wire [39 : 0] x$D_IN;
  wire x$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_stepper,
       CAN_FIRE_getResult,
       CAN_FIRE_start,
       WILL_FIRE_RL_stepper,
       WILL_FIRE_getResult,
       WILL_FIRE_start;

  // inputs to muxes for submodule ports
  wire [39 : 0] MUX_x$write_1__VAL_1, MUX_x$write_1__VAL_2;

  // remaining internal signals
  wire [35 : 0] r30_BIT_x_BITS_36_TO_34_6_7_CONCAT_r30_BIT_x_B_ETC___d106;
  wire [31 : 0] r30_BIT_x_BITS_32_TO_30_4_5_CONCAT_r30_BIT_x_B_ETC___d104;
  wire [27 : 0] r30_BIT_x_BITS_28_TO_26_2_3_CONCAT_r30_BIT_x_B_ETC___d102;
  wire [23 : 0] r30_BIT_x_BITS_24_TO_22_0_1_CONCAT_r30_BIT_x_B_ETC___d100;
  wire [19 : 0] r30_BIT_x_BITS_20_TO_18_8_9_CONCAT_r30_BIT_x_B_ETC___d98;
  wire [15 : 0] r30_BIT_x_BITS_16_TO_14_6_7_CONCAT_r30_BIT_x_B_ETC___d96;
  wire [11 : 0] r30_BIT_x_BITS_12_TO_10_4_5_CONCAT_r30_BIT_x_B_ETC___d94;
  wire [7 : 0] r30_BIT_x_BITS_8_TO_6_2_3_CONCAT_r30_BIT_x_BIT_ETC___d92;
  wire [3 : 0] r30_BIT_x_BITS_4_TO_2_0_1_CONCAT_r30_BIT_x_BIT_ETC___d90;
  wire [2 : 0] b0__h167, b39__h206;

  // action method start
  assign RDY_start = !busy_flag ;
  assign CAN_FIRE_start = !busy_flag ;
  assign WILL_FIRE_start = EN_start ;

  // actionvalue method getResult
  assign getResult = x[23:16] ;
  assign RDY_getResult = busy_flag && step_complete ;
  assign CAN_FIRE_getResult = busy_flag && step_complete ;
  assign WILL_FIRE_getResult = EN_getResult ;

  // rule RL_stepper
  assign CAN_FIRE_RL_stepper = busy_flag && !step_complete ;
  assign WILL_FIRE_RL_stepper = CAN_FIRE_RL_stepper ;

  // inputs to muxes for submodule ports
  assign MUX_x$write_1__VAL_1 =
	     { r30[b39__h206],
	       r30[x[39:37]],
	       r30[x[38:36]],
	       r30[x[37:35]],
	       r30_BIT_x_BITS_36_TO_34_6_7_CONCAT_r30_BIT_x_B_ETC___d106 } ;
  assign MUX_x$write_1__VAL_2 = { x[39:24], start_a, x[15:0] } ;

  // register busy_flag
  assign busy_flag$D_IN = !EN_getResult ;
  assign busy_flag$EN = EN_getResult || EN_start ;

  // register r30
  assign r30$D_IN = 8'h0 ;
  assign r30$EN = 1'b0 ;

  // register step_complete
  assign step_complete$D_IN = !EN_start ;
  assign step_complete$EN = EN_start || WILL_FIRE_RL_stepper ;

  // register x
  assign x$D_IN =
	     WILL_FIRE_RL_stepper ?
	       MUX_x$write_1__VAL_1 :
	       MUX_x$write_1__VAL_2 ;
  assign x$EN = WILL_FIRE_RL_stepper || EN_start ;

  // remaining internal signals
  assign b0__h167 = { x[1:0], 1'b0 } ;
  assign b39__h206 = { 1'b0, x[39:38] } ;
  assign r30_BIT_x_BITS_12_TO_10_4_5_CONCAT_r30_BIT_x_B_ETC___d94 =
	     { r30[x[12:10]],
	       r30[x[11:9]],
	       r30[x[10:8]],
	       r30[x[9:7]],
	       r30_BIT_x_BITS_8_TO_6_2_3_CONCAT_r30_BIT_x_BIT_ETC___d92 } ;
  assign r30_BIT_x_BITS_16_TO_14_6_7_CONCAT_r30_BIT_x_B_ETC___d96 =
	     { r30[x[16:14]],
	       r30[x[15:13]],
	       r30[x[14:12]],
	       r30[x[13:11]],
	       r30_BIT_x_BITS_12_TO_10_4_5_CONCAT_r30_BIT_x_B_ETC___d94 } ;
  assign r30_BIT_x_BITS_20_TO_18_8_9_CONCAT_r30_BIT_x_B_ETC___d98 =
	     { r30[x[20:18]],
	       r30[x[19:17]],
	       r30[x[18:16]],
	       r30[x[17:15]],
	       r30_BIT_x_BITS_16_TO_14_6_7_CONCAT_r30_BIT_x_B_ETC___d96 } ;
  assign r30_BIT_x_BITS_24_TO_22_0_1_CONCAT_r30_BIT_x_B_ETC___d100 =
	     { r30[x[24:22]],
	       r30[x[23:21]],
	       r30[x[22:20]],
	       r30[x[21:19]],
	       r30_BIT_x_BITS_20_TO_18_8_9_CONCAT_r30_BIT_x_B_ETC___d98 } ;
  assign r30_BIT_x_BITS_28_TO_26_2_3_CONCAT_r30_BIT_x_B_ETC___d102 =
	     { r30[x[28:26]],
	       r30[x[27:25]],
	       r30[x[26:24]],
	       r30[x[25:23]],
	       r30_BIT_x_BITS_24_TO_22_0_1_CONCAT_r30_BIT_x_B_ETC___d100 } ;
  assign r30_BIT_x_BITS_32_TO_30_4_5_CONCAT_r30_BIT_x_B_ETC___d104 =
	     { r30[x[32:30]],
	       r30[x[31:29]],
	       r30[x[30:28]],
	       r30[x[29:27]],
	       r30_BIT_x_BITS_28_TO_26_2_3_CONCAT_r30_BIT_x_B_ETC___d102 } ;
  assign r30_BIT_x_BITS_36_TO_34_6_7_CONCAT_r30_BIT_x_B_ETC___d106 =
	     { r30[x[36:34]],
	       r30[x[35:33]],
	       r30[x[34:32]],
	       r30[x[33:31]],
	       r30_BIT_x_BITS_32_TO_30_4_5_CONCAT_r30_BIT_x_B_ETC___d104 } ;
  assign r30_BIT_x_BITS_4_TO_2_0_1_CONCAT_r30_BIT_x_BIT_ETC___d90 =
	     { r30[x[4:2]], r30[x[3:1]], r30[x[2:0]], r30[b0__h167] } ;
  assign r30_BIT_x_BITS_8_TO_6_2_3_CONCAT_r30_BIT_x_BIT_ETC___d92 =
	     { r30[x[8:6]],
	       r30[x[7:5]],
	       r30[x[6:4]],
	       r30[x[5:3]],
	       r30_BIT_x_BITS_4_TO_2_0_1_CONCAT_r30_BIT_x_BIT_ETC___d90 } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        busy_flag <= `BSV_ASSIGNMENT_DELAY 1'd0;
	r30 <= `BSV_ASSIGNMENT_DELAY 8'd30;
	step_complete <= `BSV_ASSIGNMENT_DELAY 1'd0;
	x <= `BSV_ASSIGNMENT_DELAY 40'd0;
      end
    else
      begin
        if (busy_flag$EN) busy_flag <= `BSV_ASSIGNMENT_DELAY busy_flag$D_IN;
	if (r30$EN) r30 <= `BSV_ASSIGNMENT_DELAY r30$D_IN;
	if (step_complete$EN)
	  step_complete <= `BSV_ASSIGNMENT_DELAY step_complete$D_IN;
	if (x$EN) x <= `BSV_ASSIGNMENT_DELAY x$D_IN;
      end
  end

endmodule  // mkRule30

